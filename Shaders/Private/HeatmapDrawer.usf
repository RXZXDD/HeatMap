#include "/Engine/Public/Platform.ush"

//#define SHAPE_CIRCLE 0
//#define SHAPE_SQUARE 1
#define SHAPE 0 //0: circle; 1: squre


float Total;
float DataNum;
RWTexture2D<float4> RWOutputSurface;//output UAV

float4 input_Coord[MAX_DATA_NUM];// (input location in pixel ,0,0)
float4 input_Val[MAX_DATA_NUM];// (Temp ,Wind,Rain, 0)
float TextureSize;

//float4 input_Val[3]; //input factor

#if SHAPE == 0
	float sdCircle( float2 p, float r )
	{
		return length(p) - r;
	}
#elif SHAPE == 1
	float sdBox( float2 p, float2 b )
	{
		float2 d = abs(p)-b;
		return step(0,length(max(d,0.0)) + min(max(d.x,d.y),0.0));
	}
#endif


float opSmoothUnion(float d1, float d2, float k)
{
	float alpha = clamp(0.5 + (d2 - d1)/ (2*k), 0.0 ,1.0);
	return lerp( d2 ,d1 ,alpha) - k*alpha*(1 - alpha);
}

[numthreads(THREADGROUP_SIZE_X, THREADGROUP_SIZE_Y, THREADGROUP_SIZE_Z)]
void MainCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
	{

	float r[MAX_DATA_NUM];
	float R = 14; //Circle radius in pixel
	float Range;
	float3 OutVal = (0,0,0); //final output with factor

	// float4 input_Coord1[4] =
	// 					{	252,124,0,0,
	// 						153,55,0,0,
	// 						64,96,0,0,
	// 						252,224,0,0,
	// 					};
	//
	// float4 input_Val1[4] =
	// 					{	0.8,0.2,0.6,0,
	// 						1,0.6,0.5,0,
	// 						0.8,0.2,0.6,0,
	// 						1,1,1,0,
	// 					};
	
	for(int i = 0; i < DataNum; i++)
	{
		#if SHAPE == 0

			float inRange =  length(input_Coord[i].xy -DispatchThreadId.xy) - R;
			//remap value to [0,1]
			inRange =( inRange +R) / TextureSize  ;
			inRange = smoothstep(0,(R+R)/TextureSize, inRange);

		#elif SHAPE == 1

			float inRange =  sdBox(input_Coord[i].xy -DispatchThreadId.xy, float2(R,R));
		
		#endif
		//reverse DF value
		inRange = 1- inRange;
		
		r[i] = inRange ;
	}

	Range = r[0];

	//blend all DF;
	for(int k = 0 ; k < DataNum; k++)
	{
		Range = max(Range, r[k]);
		//Range = opSmoothUnion(Range, r[k], 0.2);

		//multiply factor if this DF pixel is in range
		float3 alpha = r[k] > 0 ? input_Val[k].xyz*r[k] : (0,0,0);
		OutVal = max(OutVal , alpha) ;
		
	}
	// OutVal.x = min(OutVal.x, 1);
	// OutVal.g = min(OutVal.g, 1);
	// OutVal.b = min(OutVal.b, 1);

	// OutVal.x = max(OutVal.x, 0.2);
	// OutVal.g = max(OutVal.g, 0.195);
	// OutVal.b = max(OutVal.b, 0.1);
	 RWOutputSurface[DispatchThreadId.xy] = float4(OutVal,Range);

	}